<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--bean标签标示配置bean
    	id属性标示给bean起名字
    	class属性表示给bean定义类型
	-->
    <!--scope：为bean设置作用范围，可选值为单例singloton，非单例prototype-->
    <!-- <bean id="bookDao" name="dao" class="org.example.dao.impl.BookDaoImpl" scope="singleton" init-method="init" -->
    <!--       destroy-method="destory"/> -->

    <bean id="bookDao" class="org.example.dao.impl.BookDaoImpl">
        <!-- <property name="databaseName" value="mysql"></property> -->
        <!-- <property name="connectionNum" value="10"></property> -->
        <!-- <constructor-arg name="connectionNum" value="10"></constructor-arg> -->
        <!-- <constructor-arg name="databaseName" value="mysql"></constructor-arg> -->

        <!-- 解决构造函数形参名发生变化带来的耦合问题， 是如果构造方法参数中有类型相同的参数，这种方式就不太好实现了-->
        <!-- <constructor-arg type="int" value="10"/> -->
        <!-- <constructor-arg type="java.lang.String" value="mysql"/> -->

        <!-- 这种方式可以解决参数类型重复问题,但是如果构造方法参数顺序发生变化后，这种方式又带来了耦合问题 -->
        <constructor-arg index="0" value="mysql"/>
        <constructor-arg index="1" value="100"/>
    </bean>

    <!--name:为 bean 指定别名，别名可以有多个，使用逗号，分号，空格进行分隔-->
    <bean id="bookService" name="service service4 bookEbi" class="org.example.service.impl.BookServiceImpl">
        <!--配置server与dao的关系-->
        <!-- property标签表示配置当前bean的属性
        		name属性表示配置哪一个具体的属性
        		ref属性表示参照哪一个bean
		-->
        <!-- ref: 值被引用的 bean 的 id 或者 name，推荐使用 id -->
        <!-- <property name="bookDao" ref="bookDao"/> -->

        <constructor-arg name="bookDao" ref="bookDao"></constructor-arg>
        <constructor-arg name="userDao" ref="userDao"></constructor-arg>
    </bean>

    <bean id="orderDao" class="org.example.factory.OrderDaoFactory" factory-method="getOrderDao"/>

    <!-- <bean id="userFactory" class="org.example.factory.UserDaoFactory"/> -->
    <!-- <bean id="userDao" factory-method="getUserDao" factory-bean="userFactory"/> -->

    <bean id="userDao" class="org.example.factory.UserDaoFactoryBean"/>

</beans>
